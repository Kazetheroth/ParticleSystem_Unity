// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

RWStructuredBuffer<float3> debugger;

float3 newPos;
float f0;
float f1;
float f2;
float time;

uint rng_state;

uint rand_lcg()
{
    // LCG values from Numerical Recipes
    rng_state = 1664525 * rng_state + 1013904223;
    return rng_state;
}

uint rand_xorshift()
{
    // Xorshift algorithm from George Marsaglia's paper
    rng_state ^= (rng_state << 13);
    rng_state ^= (rng_state >> 17);
    rng_state ^= (rng_state << 5);
    return rng_state;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    rng_state = int(time * 10000);

    uint r0 = rand_xorshift();
    uint r1 = rand_xorshift();
    uint r2 = rand_xorshift();
    
    f0 = float(rand_xorshift())*(1.0/4294967296.0);
    f1 = float(rand_xorshift())*(1.0/4294967296.0);
    f2 = float(rand_xorshift())*(1.0/4294967296.0);
    
    debugger[id.x] = float3(f0, f1, f2);
    Result[id.xy] = float4(f0, f1, f2, 0.0);
    
}
